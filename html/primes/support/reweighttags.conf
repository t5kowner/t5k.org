# These are the weighting functions used by reranktags and named in the
# weight_func column of the prime.archivable table; necessary to weight
# the archival tags for the weighted top 20 pages...
	
# reranktags passes the primes arrays with the following columns defined:
#
#	id (as prime_id), description, comment and log10

my $log_10 = log(10);

sub WeightDefault {  # Just the log base 10 (appx the number of digits)
  my $prime = shift;
  $$prime{'log10'};
}

sub WeightAP {  # For arithmetic sequences
  my @D = (0,0,0,
     1.3203236316937391479, # 3   
     2.8582485957192204324, # 4 
     4.1511808632374157572, # 5
     10.131794949996079844, # 6
     17.298612311584888606, # 7
     53.971948300129652396, # 8
     148.55162866378537116, # 9
     336.03432674923186553, # 10
     511.42228205899585597, # 11
     1312.3197112986432675, # 12
     2364.5989633059275071, # 13
     7820.6000302445688588);# 14
  #[15, 22938.908632325426846][16, 55651.462553499144397][17, 91555.111226144195593][18, 256474.85985417425475]
  #[19, 510992.01030920904417][20, 1900972.5848741822648][21, 6423764.3135147211453][22, 18606666.174071255441]
  #[23, 38734732.676678709886][24, 153217016.95730047461][25, 568632503.54733746258][26, 1941938594.6964590121]
  my $prime = shift;
  my $ln = $$prime{'log10'}*$log_10; # Natural log of the prime
  # Now what follows is a kludge to allow reweighttags to pass a pseudo-comment
  # to this routine for primes in multiple AP's (might be 1st term in one, 3rd
  # in another).  So it can pass the subcategory from the archival tag--it is 
  # specific and not fooled by the multiple citations.  Note this is a problem
  # because it is based on the comment, whereas WeightFF uses the prime description
  my $comment = shift || $$prime{'comment'};
  (my $k) = ($comment =~ /(\d+)\//o)
        or die "WeightAP: could not get k from comment '$comment', 
		prime $$prime{prime_id} ($$prime{'description'})";  
  if ($k > @D) { die "Not enough coefficents in WeightAP for prime ".
		"$$prime{'prime_id'}: ($$prime{'description'})"; }
  return(0) if ($k < 3);
  0.5*log(2*($k-1)/$D[$k]) + ($k/2+2)*log($ln) + log(log($ln));
}

sub WeightFF {  # For (Generalized)-Fermat factors
  my $prime = shift;
  my $ln = $$prime{'log10'}*$log_10; # Natural log of the prime
  (my $k) = ($$prime{'description'} =~ /^(\d+)\*2\^\d+\+1$/) 
	or die "weight: could not get k from description: '$$prime{'description'}', 
		prime id $${'prime_id'}";
  log($k)+3*log($ln)+log(log($ln));
}

sub WeightCC {  # For Cunningham Chains
  my @B = (1, 1.32032, 2.8582486, 5.53491, 20.26356, 71.96223, 233.87844, 677.356348);
  my $prime = shift;
  my $ln = $$prime{'log10'}*$log_10; # Natural log of the prime
  # We are getting k from the comment, but there can be only one 
  # Cunningham chain comment in the comment string
  (my $k) = ($$prime{'comment'} =~ /\((\d*)p(\+|\-)?\d*\)/o)
    or die "WeightCC: could not get k from $$prime{'comment'} in $$prime'{prime_id'}: ($$prime{'description'})";
  if ($k) { $k = int(log($k)/log(2)+0.5)} else { $k = 0 };
  if ($k > @B) { die "Not enough coefficents in WeightCC for prime $$prime{'prime_id'}: ($$prime{'description'})"; }
  # print "$$prime{'comment'} gives $k\n";
  - log($B[$k]) + ($k+2)*log($ln) + log(log($ln));
}

sub WeightKTuple {  # For Cunningham Chains WAIT???  Correct???
  my @B = (1, 1.32032, 2.8582486, 4.15118, 10.13179, 17.29861,  53.97195, 148.551629, 336.0343267, 511.422282);
  my $prime = shift;
  my $ln = $$prime{'log10'}*$log_10; # Natural log of the prime
  # We are getting k from the comment, but there can be only one or we have a problem!

  ##### print "WeightKTuple: $$prime{'comment'} in $$prime{'prime_id'}: ($$prime{'description'})\n";

  my $k = 1;
  if ($$prime{'comment'} =~ /[sS]eptuple/) {
    $k = 7;
  } elsif ($$prime{'comment'} =~ /[sS]extuplet/) {
    $k = 6;
  } elsif ($$prime{'comment'} =~ /[qQ]uintuplet/) {
    $k = 5;
  } elsif ($$prime{'comment'} =~ /[qQ]uadruplet/) {
    $k = 4;
  } elsif ($$prime{'comment'} =~ /[tT]riplet/) {
    $k = 3;
  } elsif ($$prime{'comment'} =~ /[tT]win/) {
    $k = 2;
  } else {
    die "WeightKTuple: could not get k from $$prime{'comment'} in $$prime{'prime_id'}: ($$prime{'description'})";
  }
  if ($k > @B) { die "Not enough coefficents in WeightKTuple for prime $$prime{'prime_id'}: ($$prime{'description'})"; }
### print "$$prime{'comment'} gives $k\n";
  - log($B[$k]) + $k*log($ln) + log(log($ln));
}
